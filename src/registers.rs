/// Register address of a sensor component.
pub enum ComponentAddress {
    /// Accelerometer + gyroscope (also temperature).
    Ag(u8),
    /// Magnetometer.
    M(u8),
}

/// Device registers.
#[allow(non_camel_case_types)]
pub enum Register {
    ACT_THS,
    ACT_DUR,
    INT_GEN_CFG_XL,
    INT_GEN_THS_X_XL,
    INT_GEN_THS_Y_XL,
    INT_GEN_THS_Z_XL,
    INT_GEN_DUR_XL,
    REFERENCE_G,
    INT1_CTRL,
    INT2_CTRL,
    WHO_AM_I,
    CTRL_REG1_G,
    CTRL_REG2_G,
    CTRL_REG3_G,
    ORIENT_CFG_G,
    INT_GEN_SRC_G,
    OUT_TEMP_L,
    OUT_TEMP_H,
    STATUS_REG_G,
    OUT_X_L_G,
    OUT_X_H_G,
    OUT_Y_L_G,
    OUT_Y_H_G,
    OUT_Z_L_G,
    OUT_Z_H_G,
    CTRL_REG4,
    CTRL_REG5_XL,
    CTRL_REG6_XL,
    CTRL_REG7_XL,
    CTRL_REG8,
    CTRL_REG9,
    CTRL_REG10,
    INT_GEN_SRC_XL,
    STATUS_REG_A,
    OUT_X_L_XL,
    OUT_X_H_XL,
    OUT_Y_L_XL,
    OUT_Y_H_XL,
    OUT_Z_L_XL,
    OUT_Z_H_XL,
    FIFO_CTRL,
    FIFO_SRC,
    INT_GEN_CFG_G,
    INT_GEN_THS_XH_G,
    INT_GEN_THS_XL_G,
    INT_GEN_THS_YH_G,
    INT_GEN_THS_YL_G,
    INT_GEN_THS_ZH_G,
    INT_GEN_THS_ZL_G,
    INT_GEN_DUR_G,
    OFFSET_X_REG_L_M,
    OFFSET_X_REG_H_M,
    OFFSET_Y_REG_L_M,
    OFFSET_Y_REG_H_M,
    OFFSET_Z_REG_L_M,
    OFFSET_Z_REG_H_M,
    WHO_AM_I_M,
    CTRL_REG1_M,
    CTRL_REG2_M,
    CTRL_REG3_M,
    CTRL_REG4_M,
    CTRL_REG5_M,
    STATUS_REG_M,
    OUT_X_L_M,
    OUT_X_H_M,
    OUT_Y_L_M,
    OUT_Y_H_M,
    OUT_Z_L_M,
    OUT_Z_H_M,
    INT_CFG_M,
    INT_SRC_M,
    INT_THS_L_M,
    INT_THS_H_M,
}

impl Register {
    /// Get sensor component the register belongs to, and the register address.
    pub fn addr(self) -> ComponentAddress {
        match self {
            Self::ACT_THS => ComponentAddress::Ag(0x04),
            Self::ACT_DUR => ComponentAddress::Ag(0x05),
            Self::INT_GEN_CFG_XL => ComponentAddress::Ag(0x06),
            Self::INT_GEN_THS_X_XL => ComponentAddress::Ag(0x07),
            Self::INT_GEN_THS_Y_XL => ComponentAddress::Ag(0x08),
            Self::INT_GEN_THS_Z_XL => ComponentAddress::Ag(0x09),
            Self::INT_GEN_DUR_XL => ComponentAddress::Ag(0x0a),
            Self::REFERENCE_G => ComponentAddress::Ag(0x0b),
            Self::INT1_CTRL => ComponentAddress::Ag(0x0c),
            Self::INT2_CTRL => ComponentAddress::Ag(0x0d),
            Self::WHO_AM_I => ComponentAddress::Ag(0x0f),
            Self::CTRL_REG1_G => ComponentAddress::Ag(0x10),
            Self::CTRL_REG2_G => ComponentAddress::Ag(0x11),
            Self::CTRL_REG3_G => ComponentAddress::Ag(0x12),
            Self::ORIENT_CFG_G => ComponentAddress::Ag(0x13),
            Self::INT_GEN_SRC_G => ComponentAddress::Ag(0x14),
            Self::OUT_TEMP_L => ComponentAddress::Ag(0x15),
            Self::OUT_TEMP_H => ComponentAddress::Ag(0x16),
            Self::STATUS_REG_G => ComponentAddress::Ag(0x17),
            Self::OUT_X_L_G => ComponentAddress::Ag(0x18),
            Self::OUT_X_H_G => ComponentAddress::Ag(0x19),
            Self::OUT_Y_L_G => ComponentAddress::Ag(0x1a),
            Self::OUT_Y_H_G => ComponentAddress::Ag(0x1b),
            Self::OUT_Z_L_G => ComponentAddress::Ag(0x1c),
            Self::OUT_Z_H_G => ComponentAddress::Ag(0x1d),
            Self::CTRL_REG4 => ComponentAddress::Ag(0x1e),
            Self::CTRL_REG5_XL => ComponentAddress::Ag(0xf1),
            Self::CTRL_REG6_XL => ComponentAddress::Ag(0x20),
            Self::CTRL_REG7_XL => ComponentAddress::Ag(0x21),
            Self::CTRL_REG8 => ComponentAddress::Ag(0x22),
            Self::CTRL_REG9 => ComponentAddress::Ag(0x23),
            Self::CTRL_REG10 => ComponentAddress::Ag(0x24),
            Self::INT_GEN_SRC_XL => ComponentAddress::Ag(0x26),
            Self::STATUS_REG_A => ComponentAddress::Ag(0x27),
            Self::OUT_X_L_XL => ComponentAddress::Ag(0x28),
            Self::OUT_X_H_XL => ComponentAddress::Ag(0x29),
            Self::OUT_Y_L_XL => ComponentAddress::Ag(0x2a),
            Self::OUT_Y_H_XL => ComponentAddress::Ag(0x2b),
            Self::OUT_Z_L_XL => ComponentAddress::Ag(0x2c),
            Self::OUT_Z_H_XL => ComponentAddress::Ag(0x2d),
            Self::FIFO_CTRL => ComponentAddress::Ag(0x2e),
            Self::FIFO_SRC => ComponentAddress::Ag(0x2f),
            Self::INT_GEN_CFG_G => ComponentAddress::Ag(0x30),
            Self::INT_GEN_THS_XH_G => ComponentAddress::Ag(0x31),
            Self::INT_GEN_THS_XL_G => ComponentAddress::Ag(0x32),
            Self::INT_GEN_THS_YH_G => ComponentAddress::Ag(0x33),
            Self::INT_GEN_THS_YL_G => ComponentAddress::Ag(0x34),
            Self::INT_GEN_THS_ZH_G => ComponentAddress::Ag(0x35),
            Self::INT_GEN_THS_ZL_G => ComponentAddress::Ag(0x36),
            Self::INT_GEN_DUR_G => ComponentAddress::Ag(0x37),
            Self::OFFSET_X_REG_L_M => ComponentAddress::M(0x05),
            Self::OFFSET_X_REG_H_M => ComponentAddress::M(0x06),
            Self::OFFSET_Y_REG_L_M => ComponentAddress::M(0x07),
            Self::OFFSET_Y_REG_H_M => ComponentAddress::M(0x08),
            Self::OFFSET_Z_REG_L_M => ComponentAddress::M(0x09),
            Self::OFFSET_Z_REG_H_M => ComponentAddress::M(0x0a),
            Self::WHO_AM_I_M => ComponentAddress::M(0x0f),
            Self::CTRL_REG1_M => ComponentAddress::M(0x20),
            Self::CTRL_REG2_M => ComponentAddress::M(0x21),
            Self::CTRL_REG3_M => ComponentAddress::M(0x22),
            Self::CTRL_REG4_M => ComponentAddress::M(0x23),
            Self::CTRL_REG5_M => ComponentAddress::M(0x24),
            Self::STATUS_REG_M => ComponentAddress::M(0x27),
            Self::OUT_X_L_M => ComponentAddress::M(0x28),
            Self::OUT_X_H_M => ComponentAddress::M(0x29),
            Self::OUT_Y_L_M => ComponentAddress::M(0x2a),
            Self::OUT_Y_H_M => ComponentAddress::M(0x2b),
            Self::OUT_Z_L_M => ComponentAddress::M(0x2c),
            Self::OUT_Z_H_M => ComponentAddress::M(0x2d),
            Self::INT_CFG_M => ComponentAddress::M(0x30),
            Self::INT_SRC_M => ComponentAddress::M(0x31),
            Self::INT_THS_L_M => ComponentAddress::M(0x32),
            Self::INT_THS_H_M => ComponentAddress::M(0x33),
        }
    }
}
